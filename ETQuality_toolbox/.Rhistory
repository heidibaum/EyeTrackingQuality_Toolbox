names(DT_accuracy_melt)[names(DT_accuracy_melt) == 'Deviation_R'] <- 'Right'
DT_accuracy_melt <- melt(DT_accuracy_melt,
id.vars=c('Subject'),
variable.name='Eye',
value.name='Deviation')
## plot parameters
figname_dev1 <- file.path(outpath,"Deviations_overall.png")
plottitle <- "Average deviation\n(smaller is better!)"
xlabel <- " "
ylabel <- "Deviation [px]"
yaxis_min <- 0
yaxis_max <- max(DT_accuracy_melt$Deviation,na.rm=TRUE) + 10
## generate plot
g <- ggplot(DT_accuracy_melt, aes(x=1, y=Deviation,
ymin=yaxis_min, ymax=yaxis_max,
color=Eye, shape=Eye, fill=Eye)) +
geom_point(size=marker_size, stroke=marker_stroke) +
scale_size(guide = 'none') +
facet_wrap(~ Subject) + # to control number of columns, add ncol= parameter
labs(x=xlabel,
y=ylabel,
title=plottitle) +
theme(plot.title=element_text(size=title_size, color=title_color, hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks=element_blank(),
axis.title.y=element_text(size = yaxis_size),
legend.position = "top",
legend.box.background = element_rect()) +
scale_color_manual(values = marker_colors) +
scale_fill_manual(values = marker_fills) +
scale_shape_manual(values = marker_shapes) +
guides(colour = guide_legend(override.aes = list(size=legend_size,stroke=marker_stroke)))
g
## save figure to file (if saveplotstofile==1 in Parameters)
if(saveplotstofile==1){
ggsave(figname_dev1, width=4, height=4, units="in", dpi=300)
}
## melt data in long format for plotting
DT_accuracy_byStim_melt <- DT_accuracy_byStim[,.(Subject,Stimulus,Deviation_L,Deviation_R)]
names(DT_accuracy_byStim_melt)[names(DT_accuracy_byStim_melt) == 'Deviation_L'] <- 'Left'
names(DT_accuracy_byStim_melt)[names(DT_accuracy_byStim_melt) == 'Deviation_R'] <- 'Right'
DT_accuracy_byStim_melt <- melt(DT_accuracy_byStim_melt,
id.vars=c('Subject','Stimulus'),
variable.name='Eye',
value.name='Deviation')
## plot parameters
figname_dev2 <- file.path(outpath,"Deviations_byStim.png")
plottitle <- "Deviation, by validation stimulus"
xlabel <- "Stimulus"
ylabel <- "Deviation [px]"
yaxis_min <- 0
yaxis_max <- max(DT_accuracy_byStim_melt$Deviation,na.rm=TRUE) + 10
## generate plot
g <- ggplot(DT_accuracy_byStim_melt, aes(x=Stimulus, y=Deviation,
ymin=yaxis_min, ymax=yaxis_max,
color=Eye, shape=Eye, fill=Eye)) +
geom_point(size=marker_size, stroke=marker_stroke) +
scale_size(guide = 'none') +
facet_wrap(~ Subject) + # to control number of columns, add ncol= parameter
labs(x=xlabel,
y=ylabel,
title=plottitle) +
theme(plot.title=element_text(size=title_size, color=title_color, hjust = 0.5),
axis.text.x = element_text(angle=60, vjust=0.5),
axis.ticks=element_blank(),
axis.title.y=element_text(size = yaxis_size),
legend.position = "top",
legend.box.background = element_rect()) +
scale_color_manual(values = marker_colors) +
scale_fill_manual(values = marker_fills) +
scale_shape_manual(values = marker_shapes) +
guides(colour = guide_legend(override.aes = list(size=legend_size,stroke=marker_stroke)))
g
## save figure to file (if saveplotstofile==1 in Parameters)
if(saveplotstofile==1){
ggsave(figname_dev2, width=5, height=4, units="in", dpi=300)
}
## melt data in long format for plotting
DT_accuracy_byTrial_melt <- DT_accuracy_byStim[,.(Subject,Trial,Deviation_L,Deviation_R)]
names(DT_accuracy_byTrial_melt)[names(DT_accuracy_byTrial_melt) == 'Deviation_L'] <- 'Left'
names(DT_accuracy_byTrial_melt)[names(DT_accuracy_byTrial_melt) == 'Deviation_R'] <- 'Right'
DT_accuracy_byTrial_melt <- melt(DT_accuracy_byTrial_melt,
id.vars=c('Subject','Trial'),
variable.name='Eye',
value.name='Deviation')
## plot parameters
figname_dev3 <- file.path(outpath,"Deviations_byTrial.png")
plottitle <- "Deviation, by validation trial\n(in order presented)"
xlabel <- "Trial"
ylabel <- "Deviation [px]"
yaxis_min <- 0
yaxis_max <- max(DT_accuracy_byTrial_melt$Deviation,na.rm=TRUE) + 10
## generate plot
g <- ggplot(DT_accuracy_byTrial_melt, aes(x=Trial, y=Deviation,
ymin=yaxis_min, ymax=yaxis_max,
color=Eye, shape=Eye, fill=Eye)) +
geom_point(aes(stroke=marker_stroke)) +
scale_size(guide = 'none') +
facet_wrap(~ Subject) + # to control number of columns, add ncol= parameter
labs(x=xlabel,
y=ylabel,
title=plottitle) +
theme(plot.title=element_text(size=title_size, color=title_color, hjust = 0.5),
axis.text.x = element_text(angle=60, vjust=0.5),
axis.ticks=element_blank(),
axis.title.y=element_text(size = yaxis_size),
legend.position = "top",
legend.box.background = element_rect()) +
scale_color_manual(values = marker_colors) +
scale_fill_manual(values = marker_fills) +
scale_shape_manual(values = marker_shapes) +
guides(colour = guide_legend(override.aes = list(size=legend_size,stroke=marker_stroke)))
g
## save figure to file (if saveplotstofile==1 in Parameters)
if(saveplotstofile==1){
ggsave(figname_dev3, width=5, height=4, units="in", dpi=300)
}
## define window size (100ms)
WinSize=100
## break stimuli table into chunks of 1000 rows (otherwise loop takes forever)
nchunks = ceiling(nrow(DT_stimuli)/1000)
## initialize variables for window labeling
window = 1
cum_dur = 0 # cumulative duration for current window
## loop over chunks of data and label with window number
tic()
for(j in 1:nchunks) { # do one 'chunk' of data at a time
DT_stimuli_temp <- DT_stimuli[((j*1000)-999):(j*1000),]
DT_stimuli_temp <- na.omit(DT_stimuli_temp, cols="Time") # remove extra rows from last chunk if needed
## set values for first row of data
DT_stimuli_temp$window[1] = window
cum_dur = cum_dur + DT_stimuli_temp$Time_diff[1] # cumulative duration for current window
## loop over rows
for(i in 2:nrow(DT_stimuli_temp)) {
## if same subject as previous row
if(DT_stimuli_temp$Subject[i]==DT_stimuli_temp$Subject[i-1]) {
## increase current window cumulative duration
cum_dur = cum_dur + DT_stimuli_temp$Time_diff[i]
## if window duration < set duration (plus 1/2 sample to account for rounding errors), within trial
if(cum_dur < (WinSize+5) & (DT_stimuli_temp$Trial[i]==DT_stimuli_temp$Trial[i-1])) {
DT_stimuli_temp$window[i] = window # keep current window value
} else { # if cumulative duration is greater than window duration or it's a new trial
window = window + 1 # increase window number
DT_stimuli_temp$window[i] = window # label current row
cum_dur = DT_stimuli_temp$Time_diff[1] # reset cumulative duration
} # if(cum_dur < (WinSize+5) & ...)
} else { # if subject is different from previous row
window = 1 # restart window numbering
DT_stimuli_temp$window[i] = window # label current row
cum_dur = DT_stimuli_temp$Time_diff[i] # reset cumulative duration
} # if(DT_stimuli$Subject[i]==
} # for(i in 2:nrow(DT_stimuli_temp))
if(j==1) { # first chunk
DT_stimuli_windows <- DT_stimuli_temp
} else { # bind chunks onto cumulative data table
l = list(DT_stimuli_windows,DT_stimuli_temp)
DT_stimuli_windows <- rbindlist(l)
} # if(j==1)
} # for(i in 2:nrow(DT_stimuli))
toc() # this is here to display how long this loop takes to execute
## replace 0 (missing) gaze coordinates with NA
DT_stimuli_windows$RPOR_X[DT_stimuli_windows$RPOR_X==0] <- NA
DT_stimuli_windows$RPOR_Y[DT_stimuli_windows$RPOR_Y==0] <- NA
DT_stimuli_windows$LPOR_X[DT_stimuli_windows$LPOR_X==0] <- NA
DT_stimuli_windows$LPOR_Y[DT_stimuli_windows$LPOR_Y==0] <- NA
## calculate median X/Y coordiantes within each window, by eye
DT_precision_R <- DT_stimuli_windows[,.(RPOR_X_median = median(RPOR_X,na.rm=TRUE),
RPOR_Y_median = median(RPOR_Y,na.rm=TRUE),
R_window_duration = sum(Time_diff)),
by=.(Subject,window,TrackingR)]
DT_precision_L <- DT_stimuli_windows[,.(LPOR_X_median = median(LPOR_X,na.rm=TRUE),
LPOR_Y_median = median(LPOR_Y,na.rm=TRUE),
L_window_duration = sum(Time_diff,na.rm=TRUE)),
by=.(Subject,window,TrackingL)]
## only keep valid windows with gaze for >=1/2 window duration (5ms buffer to account for rounding errors)
DT_precision_R <- subset(DT_precision_R, subset = TrackingR==1)
DT_precision_R$TrackingR <- NULL # no longer need this
DT_precision_R <- subset(DT_precision_R, subset = R_window_duration > ((WinSize/2)-5))
DT_precision_L <- subset(DT_precision_L, subset = TrackingL==1)
DT_precision_L$TrackingL <- NULL # no longer need this
DT_precision_L <- subset(DT_precision_L, subset = L_window_duration > ((WinSize/2)-5))
## merge window medians and durations with full dataset
DT_precision <- merge(DT_stimuli_windows,DT_precision_R,all=TRUE,
by=c('Subject','window'))
DT_precision <- merge(DT_precision,DT_precision_L,all=TRUE,
by=c('Subject','window'))
## calculate differences between POR and window median for each sample
DT_precision$RPOR_X_diff <- DT_precision[,.(abs(RPOR_X - RPOR_X_median))]
DT_precision$RPOR_Y_diff <- DT_precision[,.(abs(RPOR_Y - RPOR_Y_median))]
DT_precision$LPOR_X_diff <- DT_precision[,.(abs(LPOR_X - LPOR_X_median))]
DT_precision$LPOR_Y_diff <- DT_precision[,.(abs(LPOR_Y - LPOR_Y_median))]
## fill in missing sample numbers for each subject
DT_sampleInfo <- DT_precision[,.(firstSample = min(SampleNum),
lastSample = max(SampleNum)),
by=.(Subject)]
for(i in 1:nrow(DT_sampleInfo)) {
DT_temp <- data.table(Subject = DT_sampleInfo$Subject[i],
SampleNum = DT_sampleInfo$firstSample[i]:DT_sampleInfo$lastSample[i])
DT_precision <- merge(DT_temp, DT_precision, by=c("Subject","SampleNum"), all=TRUE)
}
## average over X and Y differences to get average precision by eye (for plotting purposes only)
DT_precision$RPOR_avg_diff<- DT_precision[,.((RPOR_X_diff+RPOR_Y_diff)/2)]
DT_precision$LPOR_avg_diff<- DT_precision[,.((LPOR_X_diff+LPOR_Y_diff)/2)]
## calculate median difference values across all samples to get overall precision by variable
DT_precision_medians <- DT_precision[,.(RPORX_diff_median = median(RPOR_X_diff,na.rm=TRUE),
RPORY_diff_median = median(RPOR_Y_diff,na.rm=TRUE),
LPORX_diff_median = median(LPOR_X_diff,na.rm=TRUE),
LPORY_diff_median = median(LPOR_Y_diff,na.rm=TRUE)),
by=.(Subject)]
## average X/Y precision values to get overall precision score by eye
DT_precision_medians$RPOR_precision <- (DT_precision_medians$RPORX_diff_median + DT_precision_medians$RPORY_diff_median)/2
DT_precision_medians$LPOR_precision <- (DT_precision_medians$LPORX_diff_median + DT_precision_medians$LPORY_diff_median)/2
## determine which eye provided better precision (less jitter) for each subject
DT_precision_medians$BetterPrecision[DT_precision_medians$LPOR_precision > DT_precision_medians$RPOR_precision] <- "R"
DT_precision_medians$BetterPrecision[DT_precision_medians$LPOR_precision < DT_precision_medians$RPOR_precision] <- "L"
DT_precision_medians$PrecisionDiff <- abs(DT_precision_medians$LPOR_precision - DT_precision_medians$RPOR_precision)
setcolorder(DT_precision_medians, c("Subject", "BetterPrecision", "RPOR_precision", "LPOR_precision", setdiff(names(DT_precision_medians), c("Subject", "BetterPrecision", "RPOR_precision", "LPOR_precision"))))
DT_precision_medians
## plot paramters
figname_prec1 <- file.path(outpath,"Precision_window.png")
plottitle <- "Deviations of gaze coordinates from smoothed values\n(solid=left eye, dashed=right eye)"
xlabel <- "Time (ET sample number)"
ylabel <- "Difference from window medians (averaged over X,Y) [px]"
xwindow_min <- 2000   # to set range of x values to be plotted (can change based on study parameters)
xwindow_max <- xwindow_min + 500
## generate plot
g <- ggplot(DT_precision, aes(x=SampleNum, y=LPOR_avg_diff)) +
geom_line(color=marker_colors[1]) +
geom_line(aes(y=RPOR_avg_diff), color=marker_colors[2], linetype="dashed") +
xlim(xwindow_min, xwindow_max) + # comment this line out to plot entire experiment
facet_wrap(~ Subject, ncol=2) + # to have yaxis scaled for each participant, add scales="free"
labs(x=xlabel,
y=ylabel,
title=plottitle) +
theme(plot.title=element_text(size=title_size, color=title_color, hjust = 0.5),
axis.ticks=element_blank(),
axis.title.y=element_text(size = yaxis_size))
g
## save figure to file (if savefigstofile==1 in Parameters)
if(saveplotstofile==1){
ggsave(figname_prec1, width=8, height=5, units="in", dpi=300)
}
## melt data in long format for plotting
DT_precision_melt <- DT_precision_medians[,.(Subject,RPOR_precision,LPOR_precision)]
names(DT_precision_melt)[names(DT_precision_melt) == 'LPOR_precision'] <- 'Left'
names(DT_precision_melt)[names(DT_precision_melt) == 'RPOR_precision'] <- 'Right'
DT_precision_melt <- melt(DT_precision_melt,
id.vars=c('Subject'),
variable.name='Eye',
value.name='Precision')
DT_precision_melt$Eye <- factor(DT_precision_melt$Eye, levels = c("Left", "Right"))
DT_precision_melt <- DT_precision_melt[order(Eye,Subject)]
## plot precision by eye for each subject
figname_prec2 <- file.path(outpath,"Precision_median.png")
plottitle <- "Precision\n(median difference between smoothed and unsmoothed POR)"
xlabel <- " "
ylabel <- "Difference [px]"
yaxis_min <- 0
## plot tracking ratio by eye for each subject
g <- ggplot(DT_precision_melt, aes(x=1, y=Precision,
color=Eye, shape=Eye, fill=Eye,
ymin=yaxis_min)) +
geom_point(size=marker_size, stroke=marker_stroke) +
scale_size(guide = 'none') +
facet_wrap(~ Subject) +
labs(x=xlabel,
y=ylabel,
title=plottitle) +
theme(plot.title=element_text(size=title_size, color=title_color, hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks=element_blank(),
axis.title.y=element_text(size = yaxis_size),
legend.position = "top",
legend.box.background = element_rect()) +
scale_color_manual(values = marker_colors) +
scale_fill_manual(values = marker_fills) +
scale_shape_manual(values = marker_shapes) +
guides(colour = guide_legend(override.aes = list(size=legend_size,stroke=marker_stroke)))
g
# save figure to file (if savefigstofile==1 in Parameters)
if(saveplotstofile==1){
ggsave(figname_prec2, width=4, height=4, units="in", dpi=300)
}
## plot parameters
figname_precL <- file.path(outpath,"Precision_Left.png")
plottitle <- "LEFT EYE:\nSample raw and smoothed gaze\n(black [X] and red [Y]: precision)"
xlabel <- "Time (ET samples)"
ylabel <- "Coordinate [px]"
XPOR_color <- marker_colors[1]
XSmoothed_color <- marker_colors[1]
YPOR_color <- marker_colors[2]
YSmoothed_color <- marker_colors[2]
## generate plot
cols <- c("X POR"=marker_colors[1],"X Smoothed"=marker_colors[1],
"Y POR"=marker_colors[2],"Y Smoothed"=marker_colors[2])
types <- c("X POR"="solid","X Smoothed"="dotted",
"Y POR"="solid","Y Smoothed"="dotted")
alphas <- c("X POR"=.5, "X Smoothed"=1, "Y POR"=.5, "Y Smoothed"=1)
g <- ggplot(DT_precision, aes(x=SampleNum, y=LPOR_X_diff)) +
geom_point(color="black", shape=20, alpha=.5) +
geom_point(aes(y=LPOR_Y_diff), color="red", alpha=.5, shape=20) +
geom_line(aes(y=LPOR_X_median, color="X Smoothed", linetype="X Smoothed", alpha="X Smoothed")) +
geom_line(aes(y=LPOR_Y_median, color="Y Smoothed", linetype="Y Smoothed", alpha="Y Smoothed")) +
geom_line(aes(y=LPOR_X, color="X POR", linetype="X POR", alpha="X POR")) +
geom_line(aes(y=LPOR_Y, color="Y POR", linetype="Y POR", alpha="Y POR")) +
xlim(xwindow_min, xwindow_max) +    # to set range of x values to be plotted (can change based on study parameters)
facet_wrap(~ Subject, ncol=1, scales = "free") +
labs(x=xlabel,
y=ylabel,
title=plottitle) +
theme(plot.title=element_text(size=20, color=title_color, hjust = 0.5),
axis.ticks=element_blank(),
axis.title.y=element_text(size = 16),
legend.position = "top",
legend.box.background = element_rect()) +
scale_color_manual(name="", guide='legend', values=cols) +
scale_linetype_manual(name="", values=types) +
scale_alpha_manual(name="", values=alphas)
g
# save figure to file (if savefigstofile==1 in Parameters)
if(saveplotstofile==1){
ggsave(figname_precL, width=6, height=12, units="in", dpi=300)
}
## plot parameters
figname_precR <- file.path(outpath,"Precision_Right.png")
plottitle <- "RIGHT EYE:\nSample raw and smoothed gaze\n(black [X] and red [Y]: precision)"
xlabel <- "Time (ET samples)"
ylabel <- "Coordinate [px]"
XPOR_color <- marker_colors[1]
XSmoothed_color <- marker_colors[1]
YPOR_color <- marker_colors[2]
YSmoothed_color <- marker_colors[2]
## generate plot
cols <- c("X POR"=marker_colors[1],"X Smoothed"=marker_colors[1],
"Y POR"=marker_colors[2],"Y Smoothed"=marker_colors[2])
types <- c("X POR"="solid","X Smoothed"="dotted",
"Y POR"="solid","Y Smoothed"="dotted")
alphas <- c("X POR"=.5, "X Smoothed"=1, "Y POR"=.5, "Y Smoothed"=1)
g <- ggplot(DT_precision, aes(x=SampleNum, y=RPOR_X_diff)) +
geom_point(color="black", shape=20, alpha=.5) +
geom_point(aes(y=RPOR_Y_diff), color="red", alpha=.5, shape=20) +
geom_line(aes(y=RPOR_X_median, color="X Smoothed", linetype="X Smoothed", alpha="X Smoothed")) +
geom_line(aes(y=RPOR_Y_median, color="Y Smoothed", linetype="Y Smoothed", alpha="Y Smoothed")) +
geom_line(aes(y=RPOR_X, color="X POR", linetype="X POR", alpha="X POR")) +
geom_line(aes(y=RPOR_Y, color="Y POR", linetype="Y POR", alpha="Y POR")) +
xlim(xwindow_min, xwindow_max) +    # to set range of x values to be plotted (can change based on study parameters)
facet_wrap(~ Subject, ncol=1, scales = "free") +
labs(x=xlabel,
y=ylabel,
title=plottitle) +
theme(plot.title=element_text(size=20, color=title_color, hjust = 0.5),
axis.ticks=element_blank(),
axis.title.y=element_text(size = 16),
legend.position = "top",
legend.box.background = element_rect()) +
scale_color_manual(name="", guide='legend', values=cols) +
scale_linetype_manual(name="", values=types) +
scale_alpha_manual(name="", values=alphas)
g
# save figure to file (if savefigstofile==1 in Parameters)
if(saveplotstofile==1){
ggsave(figname_precR, width=6, height=12, units="in", dpi=300)
}
## get average distance from screen (when gaze was tracked)
DT_screenDistance_R <- DT_stimuli[, .(ScreenDistance_R = mean(REyePos_Z)),
by=.(Subject,TrackingR)]
DT_screenDistance_L <- DT_stimuli[, .(ScreenDistance_L = mean(LEyePos_Z)),
by=.(Subject,TrackingL)]
DT_screenDistance_R <- subset(DT_screenDistance_R, TrackingR==1)
DT_screenDistance_L <- subset(DT_screenDistance_L, TrackingL==1)
DT_screenDistance_R$TrackingR <- NULL
DT_screenDistance_L$TrackingL <- NULL
setkey(DT_screenDistance_R, Subject)
setkey(DT_screenDistance_L, Subject)
DT_screenDistance <- DT_screenDistance_R[DT_screenDistance_L]
## display distance table
DT_screenDistance
## melt data in long format for plotting
DT_screenDistance_melt <- DT_screenDistance[,.(Subject,ScreenDistance_L,ScreenDistance_R)]
names(DT_screenDistance_melt)[names(DT_screenDistance_melt) == 'ScreenDistance_L'] <- 'Left'
names(DT_screenDistance_melt)[names(DT_screenDistance_melt) == 'ScreenDistance_R'] <- 'Right'
DT_screenDistance_melt <- melt(DT_screenDistance_melt,
id.vars=c('Subject'),
variable.name='Eye',
value.name='ScreenDistance')
## plot distance from screen by eye for each subject
figname_dist <- file.path(outpath,"DistanceFromScreen.png")
plottitle <- "Average distance from screen"
xlabel <- ""
ylabel <- "Distance [mm]"
yaxis_min = min(DT_screenDistance_melt$ScreenDistance,na.rm=TRUE) - 10
yaxis_max = max(DT_screenDistance_melt$ScreenDistance,na.rm=TRUE) + 10
## plot tracking ratio by eye for each subject
g <- ggplot(DT_screenDistance_melt, aes(x=1, y=ScreenDistance,
ymin=yaxis_min, ymax=yaxis_max,
color=Eye, shape=Eye, fill=Eye)) +
geom_point(size=marker_size, stroke=marker_stroke) +
scale_size(guide = 'none') +
facet_wrap(~ Subject) +
labs(x=xlabel,
y=ylabel,
title=plottitle) +
theme(plot.title=element_text(size=title_size, color=title_color, hjust = 0.5),
axis.text.x=element_blank(),
axis.ticks=element_blank(),
axis.title.y=element_text(size = yaxis_size),
legend.position = "top",
legend.box.background = element_rect()) +
scale_color_manual(values = marker_colors) +
scale_fill_manual(values = marker_fills) +
scale_shape_manual(values = marker_shapes) +
guides(colour = guide_legend(override.aes = list(size=legend_size,stroke=marker_stroke)))
g
## save figure to file (if saveplotstofile==1 in Parameters)
if(saveplotstofile==1){
ggsave(figname_dist, width=4, height=4, units="in", dpi=300)
}
## organize data for summary visualizations and data export
## set key variable and sort table by subject
setkey(DT_tracking,Subject)
setkey(DT_accuracy,Subject)
setkey(DT_screenDistance,Subject)
## merge tracking and accuracy tables
DT_summary <- merge(DT_tracking,DT_accuracy, by="Subject", all=TRUE) # will keep all subjects even if no accuracy data
DT_summary <- merge(DT_summary,DT_screenDistance, by="Subject", all=TRUE) # will keep all subjects even if no distance data
## flag meaningful differences between eyes (thresholds set in parameters at beginning of script)
DT_summary$TrackingDiffAboveThresh[DT_summary$TrackingDiff <= Threshold_TrackingDiff] <- 0
DT_summary$TrackingDiffAboveThresh[DT_summary$TrackingDiff > Threshold_TrackingDiff] <- 1
DT_summary$AccuracyDiffAboveThresh[DT_summary$AccuracyDiff <= Threshold_AccuracyDiff] <- 0
DT_summary$AccuracyDiffAboveThresh[DT_summary$AccuracyDiff > Threshold_AccuracyDiff] <- 1
## if BetterTracking = NA, fill with Better Accuracy Eye
## if BetterAccuracy = NA, fill with "ALERT"
for(i in 1:nrow(DT_summary)) {
if(is.na(DT_summary$BetterTracking[i])) {
DT_summary$BetterTracking[i] <- DT_summary$BetterAccuracy[i]
}
if(is.na(DT_summary$BetterAccuracy[i])) {
DT_summary$BetterAccuracy[i] <- "ALERT"
}
}
## indicate if better tracking eye matches better accuracy eye or not
DT_summary$Match_TrackAccuracy[DT_summary$BetterTracking == DT_summary$BetterAccuracy] <- 1
DT_summary$Match_TrackAccuracy[DT_summary$BetterTracking != DT_summary$BetterAccuracy] <- 0
## reorder columns
setcolorder(DT_summary, c("Subject", "Match_TrackAccuracy", "BetterTracking", "TrackingDiffAboveThresh", "BetterAccuracy", "AccuracyDiffAboveThresh", setdiff(names(DT_summary), c("Subject", "Match_TrackAccuracy", "BetterTracking", "TrackingDiffAboveThresh", "BetterAccuracy", "AccuracyDiffAboveThresh"))))
## determine which eye should be used for analysis
for(i in 1:nrow(DT_summary)) {
if(DT_summary$Match_TrackAccuracy[i] == 1) {
# if same eye is better for both tracking ratio and accuracy
DT_summary$EyeRec[i] = DT_summary$BetterTracking[i] # use eye with better tracking ratio
} else if(is.na(DT_summary$AccuracyDiffAboveThresh[i])) {
# if no accuracy statistics (no looking to validation stimuli)
DT_summary$EyeRec[i] = "UNDETERMINED: missing data" # flag for user to decide
} else if(DT_summary$TrackingDiffAboveThresh[i] == 1 &
DT_summary$AccuracyDiffAboveThresh[i] == 0) {
# if one eye has better tracking ratio and no difference between eyes for accuracy
DT_summary$EyeRec[i] = DT_summary$BetterTracking[i] # use eye with better tracking ratio
} else if(DT_summary$TrackingDiffAboveThresh[i] == 0 &
DT_summary$AccuracyDiffAboveThresh[i] == 1) {
# if one eye has better accuracy and no difference between eyes for tracking ratio
DT_summary$EyeRec[i] = DT_summary$BetterAccuracy[i] # use eye with better accuracy
} else if(DT_summary$TrackingDiffAboveThresh[i] == 0 &
DT_summary$AccuracyDiffAboveThresh[i] == 0) {
# if eyes are same for both tracking ratio and accuracy
DT_summary$EyeRec[i] = DT_summary$BetterTracking[i] # use eye with better tracking ratio
} else {
# if one eye has better tracking ratio and OTHER eye has better accuracy
DT_summary$EyeRec[i] = "UNDETERMINED: conflict" # flag for user to decide
}
}
DT_summary$EyeRec[DT_summary$EyeRec=="L"] <- "Left"
DT_summary$EyeRec[DT_summary$EyeRec=="R"] <- "Right"
## reorder columns
setcolorder(DT_summary, c("Subject", "EyeRec", setdiff(names(DT_summary), c("Subject", "EyeRec"))))
DT_summary$Subject <- as.character(DT_summary$Subject)
## plot eye recommendation for each subject
figname_rec <- file.path(outpath,"EyeRecommendations.png")
plottitle <- "Eye recommendation by subject"
xlabel <- "Eye recommendation"
ylabel <- "Subject"
## plot tracking ratio by eye for each subject
g <- ggplot(DT_summary, aes(x=EyeRec, y=Subject,
color=EyeRec, shape=EyeRec, fill=EyeRec)) +
geom_point(size=marker_size+2, stroke=marker_stroke) +
scale_size(guide = 'none') +
labs(x=xlabel,
y=ylabel,
title=plottitle) +
theme(plot.title=element_text(size=title_size, color=title_color, hjust = 0.5),
axis.title.y=element_text(size = yaxis_size),
legend.position = "top",
legend.box.background = element_rect()) +
scale_color_manual(values = marker_colors) +
scale_fill_manual(values = marker_fills) +
scale_shape_manual(values = marker_shapes) +
guides(colour = guide_legend(override.aes = list(size=legend_size,stroke=marker_stroke)))
g
## save figure to file (if saveplotstofile==1 in Parameters)
if(saveplotstofile==1){
ggsave(figname_rec, width=4, height=6, units="in", dpi=300)
}
## write summary output to file
outputfile <- file.path(outpath,outputname)
write.csv(DT_summary, file = outputfile)
## display summary table
DT_summary
ggplot(DT_summary, aes(x=TrackingDiff)) +
geom_histogram(color=title_color, fill="white", size=1.5, binwidth=5) +
geom_vline(xintercept=Threshold_TrackingDiff, color="red")
ggplot(DT_summary, aes(x=AccuracyDiff)) +
geom_histogram(color=title_color, fill="white", size=1.5, binwidth=5) +
geom_vline(xintercept=Threshold_AccuracyDiff, color="red")
